                   
                   ** Some Usefull commands **

============================================================

1. Github
    -> create github repository 

    -> "git config --global user.name "<git username>"" - only for first time
    -> "git config --global user.email <git gmail id>"  - only for first time

    -> "git init"
    -> "git add <file name>"
    -> "git commit -m "<commit message>""
    -> "git push -u origin <branch>"

    -> "git status"

============================================================

2. To create and activate virtual environment

			Method - 1 (using anaconda)
    -> "conda create -p venv python==3.11 -y" 
    -> "conda activate venv/"
    -> "conda deactivate" - deactivate virtual environment after using it to avoid conflict

    -> "conda --version" - to check conda is installed or not

			Method - 2 (using python)
    -> "python -m venv myenv"
    -> "myenv\Scripts\activate"
    -> "deactivate"
	
			Method - 3 (using linux method)
    -> "pip install virtualenv"
    -> "virtualenv -p python3 virtual_env"
    -> "virtual_env\Scripts\activate"
    -> "deactivate"

============================================================

3. To install requirements
    -> "pip install -r requirements.txt"

============================================================

4. To run flask application
    -> "python application.py"

============================================================

5. Dockerfile template
"
python:3.11-alpine
COPY . /app
WORKDIR /app
RUN pip install -r requirements.txt
CMD python application.py
"

-------------------------------------------

6. To create docker container
    -> "docker build -t <image name> ."
    -> "docker run -p 5000 5000 <image name>"

    -> "docker images"
    
    -> "docker ps" - give the present running container information
    -> "docker stop <container id>"

    -> "docker tag <image name> <username>/<image_name>" - renaming docker image
    -> "docker push <username>/<image_name>:<tag>"
    -> "docker exec -i -t <container id example:e398c7dc3004> /bin/sh" - to interact with the running container environment
        -> "vim <file name>" - to edit file
            -> To install vim editor
            -> "apt update"
            -> "apt install vim -y"
	-> "i" - to insert code in file
        -> "esc" + ":wq!" - to save file

============================================================

7. Mlflow
    -> "mlflow ui" - for monitering using ui

MLflow on AWS Setup:
1. Login to AWS console.
2. Create IAM user with AdministratorAccess.
3. Export the credentials in your AWS CLI by running "aws configure".
4. Create a s3 bucket.
5. Create EC2 machine (Ubuntu) & add Security groups 5000 port

	Run the following command on EC2 machine:

	-> "sudo apt update" 

	-> "sudo apt install python3-pip"
	-> "sudo pip3 install pipenv"
	-> "sudo pip3 install virtualenv"

	-> "mkdir mlflow"
	-> "cd mlflow"

	-> "pipenv install mlflow"
	-> "pipenv install awscli"
	-> "pipenv install boto3"
	-> "pipenv shell"

	-> "aws configure"


	#Finally - connect s3 bucket
	-> "mlflow server -h 0.0.0.0 --default-artifact-root s3://mlflow-test-23"

	#open Public IPv4 DNS to the port 5000

6. set uri in your local "terminal" and in "your code"
	-> "export MLFLOW_TRACKING_URI=http://ec2-54-147-36-34.compute-1.amazonaws.com:5000/"

============================================================

8. DVC
    -> "dvc init"
    -> "dvc add <data.csv>" - to track the data
    -> "dvc checkout" - have to do after "git checkout <commit id>"
    -> "dvc remote add -d <remote name> <url>" - can set the remote repository location(like aws s3, azure database,..)
    -> "dvc push" - used to push the data to the remote repository
    -> "dvc repro" - used for pipeline versioning(reproducability)
    -> "dvc dag" - show the depends of the components

============================================================